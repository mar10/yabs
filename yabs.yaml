# Yabs Workflow Definition
# See https://github.com/mar10/yabs

file_version: yabs#1

config:
  repo: 'mar10/yabs'
  version:
    - type: __version__
      file: yabs/__init__.py
  gh_auth:
    oauth_token_var: GITHUB_OAUTH_TOKEN
  max_increment: minor
  branches:
    - master

tasks:
  # 'check': Assert preconditons and fail otherwise
  - task: check
    branches: master        # Current branch must be in this list
    can_push: true          # Test if 'git push' would/would not succeed
    github: true            # GitHub repo name valid and online accessible
    clean: true             # Repo must/must not contain modifications
    os: null                # (str, list)
    python: ">=3.8"         # SemVer specifier
    twine: true             # `twine` is available
    up_to_date: true        # everything pulled from remote
    venv: true              # running inside a virtual environment
    version: true           # `setup.py --version` returns the configured version

  # run `tox -e lint`
  - task: exec
    args: ["tox", "-e", "lint"]
    always: true            # `true`: run even in dry-run mode
    silent: true            # `true`: suppress output
    ignore_errors: false    # `true`: show warning, but proceed on errors (exit code != 0)

  # run `tox`
  - task: exec
    args: ["tox"]
    always: true            # `true`: run even in dry-run mode
    silent: true            # `true`: suppress output
    ignore_errors: false    # `true`: show warning, but proceed on errors (exit code != 0)

  # 'bump': version by `--inc` argument
  - task: bump

  # 'commit': Commit modified files
  - task: commit
    add_known: true         # Commit with -a flag
    message: |
      Bump version to {version}

  # 'tag': Create an annotated tag
  - task: tag
    name: v{version}
    message: |
      Version {version}

  # 'build': `setup.py bdist_wheel`
  - task: build
    targets:
      - sdist
      - bdist_wheel

  # 'push': Push changes and tags
  - task: push
    tags: true              # Use `--follow-tags`

  # 'pypi_release': Create a release on PyPI
  - task: pypi_release

  # 'github_release': Create a release on GitHub
  - task: github_release
    name: 'v{version}'
    message: |
      Released {version}
      [Commit details](https://github.com/{repo}/compare/{org_tag_name}...{tag_name}).
    # draft: true
    prerelease: null  # null: guess from version number format
    # upload:
    #   - sdist
    #   - bdist_wheel

  - task: bump
    inc: postrelease
    prerelease_prefix: 'a'

  - task: commit
    add_known: true
    # `[ci skip]Â´ tells travis to ignore
    message: |
      Bump prerelease ({version}) [ci skip]

  - task: push
