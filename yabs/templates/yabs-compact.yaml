# Yabs Workflow Definition
# See https://github.com/mar10/yabs
file_version: yabs#1

config:
  repo: '{{ full_repo_name }}'
  gh_auth:
    oauth_token_var: {{ github_token_env_name }}
  version:
    - type: __version__
      file: src/test_release_tool/__init__.py
  branches:
    - main  # Used by GitHub since 2020-11
    - master  # legacy 


tasks:
  # The following tools are available. They are executed in the order
  # listed here

  # 'check': Assert preconditons and fail otherwise
  - task: check
    build: true             # dist/ folder exists
    can_push: true          # Test if 'git push' would/would not succeed
    clean: true             # Repo must/must not contain modifications
    python: ">=3.9"         # SemVer specifier
    twine: true             # `twine` is available
    up_to_date: true        # everything pulled from remote
    venv: true              # running inside a virtual environment
    version: true           # `setup.py --version` returns the configured version
    # winget: true            # `wingetcreate` is available
    yabs: ">=0.5"           # SemVer specifier

  # 'exec': Run arbitrary shell command
  - task: exec
    args: ["tox", "-e", "lint"]     # shell command and optional arguments
    always: true            # `true`: run even in dry-run mode

  # 'bump': Increment project version (requires argument: `yabs run --inc INC`)
  - task: bump
    inc: null               # Use value passed as 'yabs run --inc INC'

  # 'commit': Commit modified files
  - task: commit
    add_known: true         # Commit with -a flag
    message: |
      Bump version to {version}

  # 'tag': Create an annotated tag
  - task: tag
    name: v{version}
    message: |
      Version {version}

  # 'push': Push changes and tags
  - task: push
    tags: true

  # 'pypi_release': Create a release on PyPI using `twine`
  - task: pypi_release
    build:
      - sdist
      - bdist_wheel
    upload: true

  # 'github_release': Create a release on GitHub
  - task: github_release
    draft: false

  # Bump 'v1.2.3' => 'v1.2.4-a1'
  - task: bump
    inc: "postrelease"

  # Commit using '[ci skip]' as part of the message to prevent CI testing
  - task: commit
    add_known: true
    message: |
      Bump prerelease ({version}) [ci skip]

  # Push to GitHub
  - task: push
